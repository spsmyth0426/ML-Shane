<html>
  <head>
    <!-- Load TensorFlow.js -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.13.3/dist/tf.min.js"> </script>
    <script type="text/javascript" src="complexTrain.json"></script>
    <script type="text/javascript" src="email-testing.json"></script>

    <!-- Place your code in the script tag below. You can also use an external .js file -->
    <script> 
        console.log(email);
        console.log(emailTesting);
        // Notice there is no 'import' statement. 'tf' is available on the index-page
        // because of the script tag above.
        
        $(document).ready(function () {
            var keys = []
            $.each(email[0], function (key, data) {
                console.log(key);
                keys.push(key);
            })
            var count = keys.length;
            console.log(keys);
        //});

        // Define a model for linear regression.
        //convert / set our data
        const trainingData = tf.tensor2d(email.map(item => keys))
        const outputData = tf.tensor2d(email.map(item => [
            item.LastSendOpened === 1 ? 1 : 0,
            item.LastSendOpened === 0 ? 1 : 0
        ]))
        const testingData = tf.tensor2d(emailTesting.map(item => keys))

        console.log(testingData)

        // build neural network
        const model = tf.sequential()

        model.add(tf.layers.dense({
            inputShape: [count-1],
            activation: "sigmoid",
            units: count,
        }))
        model.add(tf.layers.dense({
            inputShape: [count],
            activation: "sigmoid",
            units: 2,
        }))
        model.add(tf.layers.dense({
            activation: "sigmoid",
            units: 2,
        }))
        model.compile({
            loss: "meanSquaredError",
            optimizer: tf.train.adam(.06),
        })
        // train/fit our network
        const startTime = Date.now()
        model.fit(trainingData, outputData, {epochs: 50,
        callbacks: {
            onEpochEnd: async (epoch, log) => {
            console.log(`Epoch ${epoch}: loss = ${log.loss}`);
            }
        }})
        .then((history) => {
            console.log(history)
            model.predict(testingData).print()

            const saveResult = model.save('downloads://my-model-1');
            console.log(saveResult)
        })

    });
        //const saveResult = model.save('localstorage://my-model-1');
        // test network
    
    </script>
  </head>

  <body>
  </body>
</html>